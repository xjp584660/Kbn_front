// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace KBN
{
public abstract class AssetBundleOTADownloaderImp_Base : MonoBehaviour
{
	
	public abstract void queryAssetBundleState( string assetBundleName, MulticastDelegate stateQueryCallback );
	public abstract void subscribeDownloadProgress( string assetBundleName, MulticastDelegate downloadProgressCallback,
		                                               bool replaceCallbackIfAlreadyExists );
	
	public void releaseAllAssetBundles()
	{
		foreach( KeyValuePair<string, AssetBundleCacheContext> context in m_assetBundleCache )
		{
			string assetBundleKey = TextureMgr.instance().otaPackageNameToType( context.Value.m_assetBundleFileName );
			releaseAssetBundle( assetBundleKey );
		}
	}

	public void releaseAssetBundle( string assetBundleKey )
	{
		if( assetBundleKey != null )
		{
			if( m_assetBundleCache.ContainsKey( assetBundleKey ) )
			{
				AssetBundleCacheContext context = m_assetBundleCache[assetBundleKey] as AssetBundleCacheContext;
				context.m_assetBundle.Unload( false ); // Deference the web stream
				m_assetBundleCache.Remove( assetBundleKey ); // Remove the asset bundle from the cache
			}
		}
	}

	public object retrieveAsset( string assetName, string assetBundleKey )
	{
		object retval = null;
		if( m_assetBundleCache.ContainsKey( assetBundleKey ) )
		{
			AssetBundleCacheContext context = m_assetBundleCache[assetBundleKey] as AssetBundleCacheContext;
			retval = context.m_assetBundle.LoadAsset( assetName ) as object;
		}
		return retval;
	}

	public bool checkAssetBundleExistenceOnServer( string assetBundleName )
	{
		string[] keys = _Global.GetObjectKeys( m_remoteAssetBundle );
		for( int i = 0; i < keys.Length; ++i )
		{
			if( assetBundleName == keys[i] )
			{
				return true;
			}
		}
		return false;
	}
	
	public HashObject filterAssetBundleListOnGameStart( HashObject atoList )
	{
		HashObject filteredList = new HashObject();
		
		string[] keys = _Global.GetObjectKeys( atoList );
		
		for( int i = 0; i < keys.Length; ++i )
		{
			string k = keys[i];
			//if( k.Contains( "chaptermap" ) )
			//{
			//	
			//}
			//else
			//{
				if( !DONT_DOWNLOAD_ASSET_BUNDLE_IN_INITIAL_LIST )
				{
					filteredList[k] = atoList[k];
				}
			//}
			
			if( USING_INITIAL_ASSET_BUNDLE_LIST )
			{
				// Strip the platform-specific extension name
				string assetBundleName = TextureMgr.instance().castBundleName( k );
				
				AssetBundleInfo info = new AssetBundleInfo();
				info.m_url = atoList[k]["url"].Value.ToString();
				info.m_version = atoList[k]["ver"].Value.ToString();
				m_remoteAssetBundle[assetBundleName] = new HashObject();
				m_remoteAssetBundle[assetBundleName].Value = info;
			}
		}
		if( DEBUG_CREATE_CHAPTER_MAP_URLS_ANYWAY ) {
			if( keys.Length == 0 )
			{
				m_remoteAssetBundle["chaptermap100.assetbundle"] = new HashObject();
				AssetBundleInfo info = new AssetBundleInfo();
				info.m_url = "http://www.cmdev6.kabam.asia/assets_dev/T1/chaptermap100.assetbundle.ios";
				info.m_version = "2";
				m_remoteAssetBundle["chaptermap100.assetbundle"].Value = info;
				
				m_remoteAssetBundle["chaptermap101.assetbundle"] = new HashObject();
				info = new AssetBundleInfo();
				info.m_url = "http://www.cmdev6.kabam.asia/assets_dev/T1/chaptermap101.assetbundle.ios";
				info.m_version = "1";
				m_remoteAssetBundle["chaptermap101.assetbundle"].Value = info;
				
				m_remoteAssetBundle["chaptermap102.assetbundle"] = new HashObject();
				info = new AssetBundleInfo();
				info.m_url = "http://www.cmdev6.kabam.asia/assets_dev/T1/chaptermap102.assetbundle.ios";
				info.m_version = "1";
				m_remoteAssetBundle["chaptermap102.assetbundle"].Value = info;
				
				m_remoteAssetBundle["chaptermap103.assetbundle"] = new HashObject();
				info = new AssetBundleInfo();
				info.m_url = "http://www.cmdev6.kabam.asia/assets_dev/T1/chaptermap103.assetbundle.ios";
				info.m_version = "1";
				m_remoteAssetBundle["chaptermap103.assetbundle"].Value = info;
				
				m_remoteAssetBundle["chaptermap104.assetbundle"] = new HashObject();
				info = new AssetBundleInfo();
				info.m_url = "http://www.cmdev6.kabam.asia/assets_dev/T1/chaptermap104.assetbundle.ios";
				info.m_version = "1";
				m_remoteAssetBundle["chaptermap104.assetbundle"].Value = info;
				
				m_remoteAssetBundle["chaptermap105.assetbundle"] = new HashObject();
				info = new AssetBundleInfo();
				info.m_url = "http://www.cmdev6.kabam.asia/assets_dev/T1/chaptermap105.assetbundle.ios";
				info.m_version = "1";
				m_remoteAssetBundle["chaptermap105.assetbundle"].Value = info;
			}
		} // DEBUG_CREATE_CHAPTER_MAP_URLS_ANYWAY
		

		m_owner.onInitialAssetBundleListAcquire();
		return filteredList;
	}

	public void setOwner( GameMain owner )
	{
		m_owner = owner;
	}


	protected void cacheAssetBundle( AssetBundle assetBundle, string assetBundleFileName )
	{
		AssetBundleCacheContext context = new AssetBundleCacheContext();
		context.m_assetBundle = assetBundle;
		context.m_assetBundleFileName = assetBundleFileName;
		string assetBundleKey = TextureMgr.instance().otaPackageNameToType( assetBundleFileName );
		m_assetBundleCache[assetBundleKey] = context;
	}

	protected string getOTALocalFilePath()
	{
		string otaDataPath = KBN.GameMain.GetApplicationDataSavePath() + "/ota/";
		string bundlePath = otaDataPath + Datas.singleton.getGameTheme();
		string path = bundlePath + "/";
		return path;
	}

	protected class AssetBundleCacheContext
	{
		public AssetBundle	m_assetBundle;
		public string		m_assetBundleFileName;
	};

	protected Dictionary<string, AssetBundleCacheContext> m_assetBundleCache = new Dictionary<string, AssetBundleCacheContext>();

	protected static bool USING_INITIAL_ASSET_BUNDLE_LIST = true;
	protected static bool DONT_DOWNLOAD_ASSET_BUNDLE_IN_INITIAL_LIST = false;
	protected static bool DEBUG_CREATE_CHAPTER_MAP_URLS_ANYWAY = true;
	
	protected GameMain m_owner;

	protected class AssetBundleInfo
	{
		public string		m_url;
		public string		m_version;
	};

	protected HashObject m_remoteAssetBundle = new HashObject();
}
}