using System;
using System.Collections.Generic;
using System.Globalization;

namespace KBN.DataTable.Editor
{
    public static class DataTableEditorUtility
    {
        #region Fields

        #region Public

        public const string DataItemInterfaceName = "KBN.DataTable.IDataItem";

		public const string CSharpFilePath = "Assets/Standard Assets/Data/DataTable/AutoGenerated/";

        #endregion

        #region Private

        private const string ClassNamePlaceholder = "@DefineFields";

        private const string FieldsDefinePlaceholder = "@FieldsDefine";

        private const string FieldsAssignPlaceholder = "@FieldsAssign";

		private const string IsKey = "KEY";

		private const string IsNotKey = "NOT_KEY";

        private const string FloatType = "FLOAT";

        private const string IntType = "INT";

        private const string StringType = "STRING";

		private const string DateTimeType = "DATETIME";

        private const string DataTableClassTemplate = @"using System.Linq;

namespace KBN.DataTable
{
    public class " + ClassNamePlaceholder + @" : IDataItem
    {
        #region Fields
        " + FieldsDefinePlaceholder + @"
        #endregion

        #region Methods

        public void LoadFromText(string[] columns)
        {
			" + FieldsAssignPlaceholder + @"
        }

        #endregion
    }
}
";

        #endregion

        #endregion

        #region Methods

        public static string GetCSharpFile(DataTableClassInfo dataTableClassInfo)
        {
            var fields = "";
            var fieldsAssign = "";
            var index = 0;
            foreach (var dataTableFieldInfo in dataTableClassInfo.DataTableFieldInfoList)
            {
                var type = dataTableFieldInfo.Type;
                var name = dataTableFieldInfo.Name;
				string assign = "columns[#];";
				if( type == DataTableFieldType.Float )
				{
					assign = "float.Parse(columns[#]);";
				}
				else if( type == DataTableFieldType.Int )
				{
					assign = "int.Parse(columns[#]);";
				}
				else if( type == DataTableFieldType.DateTime )
				{
					assign =  "System.DateTime.Parse(columns[#]);";
				}
				else
				{
					assign = "columns[#];";
				}
				fields += "\n        public " + ConvertToType( type ) + " " + name + ";\n";
                fieldsAssign += "\n            " + name + " = " +
                                assign.Replace("#", index++.ToString(CultureInfo.InvariantCulture));
            }
            return DataTableClassTemplate.Replace(ClassNamePlaceholder, dataTableClassInfo.ClassName)
                                       .Replace(FieldsDefinePlaceholder, fields)
                                       .Replace(FieldsAssignPlaceholder, fieldsAssign);
        }

        public static string GetCSharpFile(string className, string dataHeader)
        {
            var dataTableClassInfo = new DataTableClassInfo { ClassName = className };
            var dataHeaderLines = dataHeader.Split(DataTable.LineSplitChar, StringSplitOptions.None);
            var fieldNames = dataHeaderLines[0].Split(DataTable.ColumnSplitChar);
            var typeNames = dataHeaderLines[1].Split(DataTable.ColumnSplitChar);
//            var keyInfos = dataHeaderLines[2].Split(DataTable.ColumnSplitChar);
            var count = fieldNames.Length;
            var dataTableFieldInfoList = dataTableClassInfo.DataTableFieldInfoList;
            for (var i = 0; i != count; ++i)
            {
//                if (keyInfos[i] == IsKey)
//                {
//                    continue;
//                }
                var type = typeNames[i];
				var fieldType = DataTableFieldType.String;
				if( type == FloatType )
				{
					fieldType = DataTableFieldType.Float;
				}
				else if( type == IntType )
				{
					fieldType = DataTableFieldType.Int;
				}
				else if( type == DateTimeType )
				{
					fieldType = DataTableFieldType.DateTime;
				}
				else
				{
					fieldType = DataTableFieldType.String;
				}

                dataTableFieldInfoList.Add(new DataTableFieldInfo { Name = fieldNames[i], Type = fieldType });
            }
            return GetCSharpFile(dataTableClassInfo);
        }

        public static string GetDataHeader(Type classType, params string[] fieldTypeKeyInfo)
        {
            if (classType.GetInterface(DataItemInterfaceName) == null)
            {
                throw new InvalidCastException();
            }
            var fieldNames = new List<string>();
            var typeNames = new List<string>();
            var keyInfos = new List<string>();
            var fields = classType.GetFields();
            var count = fieldTypeKeyInfo.Length / 2;
            for (var i = 0; i != count; ++i)
            {
                fieldNames.Add(fieldTypeKeyInfo[i * 2]);
                typeNames.Add(fieldTypeKeyInfo[i * 2 + 1]);
                keyInfos.Add(IsKey);
            }
            count = fields.Length;
            for (var i = 0; i != count; ++i)
            {
                var field = fields[i];
                fieldNames.Add(field.Name);
				string type = string.Empty;
				if(field.FieldType == typeof(int))
				{
					type = IntType;
				}
				else if (field.FieldType == typeof(float))
				{
					type = FloatType;
				}
				else if (field.FieldType == typeof(System.DateTime))
				{
					type = DateTimeType;
				}
				else
				{
					type = StringType;
				}

                typeNames.Add(type);
                keyInfos.Add(IsNotKey);
            }
            return DataTable.JoinString(DataTable.LineSplitChar,
			                            new string[]
							            {
							                DataTable.JoinString(DataTable.ColumnSplitChar, fieldNames.ToArray()),
							                DataTable.JoinString(DataTable.ColumnSplitChar, typeNames.ToArray()),
							                DataTable.JoinString(DataTable.ColumnSplitChar, keyInfos.ToArray())
							            });
        }

		private static string ConvertToType( DataTableFieldType type )
		{
			string retType = "string";
			if ( type == DataTableFieldType.Int ) 
			{
				retType = "int";
			}
			else if( type == DataTableFieldType.Float )
			{
				retType = "float";
			}
			else if( type == DataTableFieldType.DateTime )
			{
				retType = "System.DateTime";
			}
			return retType;

		}
        #endregion
    }
}
